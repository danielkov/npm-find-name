{"version":3,"sources":["Npm-logo.svg","useFetch.ts","conditional.ts","Result.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","useFetch","url","options","useState","loading","setLoading","data","setData","error","setError","controller","AbortController","signal","useEffect","fetch","then","res","json","catch","err","abort","conditional","condition","trueCase","falseCase","props","ResultContainer","styled","article","PackageName","h2","css","PackageDescription","p","Bar","score","name","value","maxValue","text","styles","buildStyles","pathColor","textColor","trailColor","BarContainer","div","Result","word","packageName","replace","available","length","package","description","detail","quality","popularity","maintenance","final","AppContainer","StickyContainer","AppLogo","img","AppText","InfoLink","a","AppInput","input","HeaderContent","AppHeader","header","AppResults","section","App","search","setSearch","hasResult","handleChange","useCallback","e","target","style","distanceFromTop","console","log","hasResults","background","boxShadow","src","logo","type","placeholder","onChange","href","map","key","Boolean","window","location","hostname","match","GlobalStyle","createGlobalStyle","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.6e58ecc2.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Npm-logo.6f7aeee8.svg\";","import { useEffect, useState } from \"react\";\n\nconst useFetch = <T>(url: string, options?: RequestInit) => {\n  const [loading, setLoading] = useState(false);\n  const [data, setData] = useState<T | null>(null);\n  const [error, setError] = useState(null);\n  const controller = new AbortController();\n  const { signal } = controller;\n\n  useEffect(() => {\n    setLoading(true);\n    fetch(url, { ...options, signal })\n      .then(res => res.json())\n      .then(data => {\n        setLoading(false);\n        setData(data);\n      })\n      .catch(err => {\n        setLoading(false);\n        setError(err);\n      });\n    return () => controller.abort();\n  }, [url, options]);\n  return { data, error, loading };\n};\n\nexport default useFetch;\n","const conditional = (\n  condition: string,\n  trueCase: any,\n  falseCase: any\n) => (props: any) => {\n  return props[condition] ? trueCase : falseCase;\n};\n\nexport default conditional;\n","import React from \"react\";\nimport useFetch from \"./useFetch\";\nimport styled, { css } from \"styled-components\";\nimport conditional from \"./conditional\";\nimport { CircularProgressbar, buildStyles } from \"react-circular-progressbar\";\nimport \"react-circular-progressbar/dist/styles.css\";\n\ntype PackageResult = {\n  package: {\n    name: string;\n    flags: { unstable: boolean };\n    highlight: string;\n    author: { name: string; email: string; username: string };\n    date: string;\n    description: string;\n    links: {\n      homepage: string;\n      npm: string;\n      repository: string;\n    };\n    maintainers: { username: string; email: string }[];\n    publisher: { username: string; email: string };\n    scope: string;\n    version: string;\n  };\n  score: {\n    detail: {\n      maintenance: number;\n      popularity: number;\n      quality: number;\n    };\n    final: number;\n  };\n  searchScore: number;\n};\n\nconst ResultContainer = styled.article`\n  color: var(--text-color);\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  width: 240px;\n  background: var(--content-background-color);\n  padding: 12px 20px;\n  margin-bottom: 20px;\n  border-radius: 6px;\n  box-shadow: 0 6px 12px rgba(0, 0, 0, 0.1);\n`;\n\nconst PackageName = styled.h2`\n  ${conditional(\n    \"available\",\n    css`\n      color: #00c642;\n    `,\n    css`\n      color: #cb3837;\n    `\n  )}\n`;\n\nconst PackageDescription = styled.p`\n  hyphens: auto;\n`;\n\nconst Bar = ({ score, name }: { score: number; name: string }) => (\n  <CircularProgressbar\n    value={score}\n    maxValue={1}\n    text={name}\n    styles={buildStyles({\n      pathColor: `rgba(203, 56, 55, ${score / 1})`,\n      textColor: \"var(--text-color)\",\n      trailColor: \"transparent\"\n    })}\n  />\n);\n\nconst BarContainer = styled.div`\n  height: 50px;\n  display: flex;\n`;\n\nconst Result = ({ word }: { word: string }) => {\n  const packageName = word.replace(\" \", \"-\");\n  const { data, loading, error } = useFetch<PackageResult[]>(\n    `https://api.npms.io/v2/search/suggestions?q=${packageName}&size=1`\n  );\n\n  if (error || loading || !data) {\n    return (\n      <ResultContainer>\n        <h2>{packageName}</h2>\n      </ResultContainer>\n    );\n  }\n\n  const available =\n    !loading && !!data && (!data.length || data[0].package.name !== word);\n\n  if (available) {\n    return (\n      <ResultContainer>\n        {/* \n  // @ts-ignore */}\n        <PackageName available>{packageName} ✅</PackageName>\n      </ResultContainer>\n    );\n  }\n  const {\n    package: { name, description },\n    score: {\n      detail: { quality, popularity, maintenance },\n      final\n    }\n  } = data![0];\n  return (\n    <ResultContainer>\n      <PackageName>{name}</PackageName>\n      <PackageDescription>{description}</PackageDescription>\n      {!available && data && data[0].score && (\n        <BarContainer>\n          <Bar score={maintenance} name=\"M\" />\n          <Bar score={popularity} name=\"P\" />\n          <Bar score={quality} name=\"Q\" />\n          <Bar score={final} name=\"F\" />\n        </BarContainer>\n      )}\n    </ResultContainer>\n  );\n};\n\nexport default Result;\n","import React, { useState, useCallback } from \"react\";\nimport logo from \"./Npm-logo.svg\";\nimport styled, { css } from \"styled-components\";\nimport { StickyContainer, Sticky } from \"react-sticky\";\n\nimport useFetch from \"./useFetch\";\nimport conditional from \"./conditional\";\nimport Result from \"./Result\";\n\nconst AppContainer = styled(StickyContainer)`\n  text-align: center;\n  position: relative;\n  display: initial;\n`;\n\nconst AppLogo = styled.img`\n  height: 18vmin;\n`;\n\nconst AppText = styled.p`\n  color: var(--text-color);\n`;\n\nconst InfoLink = styled.a`\n  text-decoration: none;\n`;\n\nconst AppInput = styled.input`\n  font-size: calc(10px + 2vmin);\n  background: rgba(255, 255, 255, 0.1);\n  border: rgba(0, 0, 0, 0.1);\n  border-radius: 4px;\n  padding: 8px 12px;\n  box-shadow: 0 6px 12px rgba(0, 0, 0, 0.1);\n  transition: box-shadow 0.2s ease-in-out;\n  color: var(--input-color);\n  :focus {\n    outline: none;\n    box-shadow: 0 8px 18px rgba(0, 0, 0, 0.2);\n  }\n  ::placeholder {\n    color: var(--placeholder-color);\n  }\n`;\n\nconst HeaderContent = styled.div`\n  display: flex;\n  max-width: 1200px;\n  width: 100%;\n`;\n\nconst AppHeader = styled.header`\n  display: flex;\n  justify-content: center;\n  background: var(--background-color);\n  transition: all 0.2s ease-in-out;\n  transition-property: box-shadow, background-color;\n  ${conditional(\n    \"hasResults\",\n    css`\n      padding: 8px 12px;\n      ${AppText} {\n        display: none;\n      }\n      ${AppLogo} {\n        height: 50px;\n        margin-right: 20px;\n      }\n      ${AppInput} {\n        font-size: calc(6px + 2vmin);\n        background: none;\n        box-shadow: none;\n        flex: 1;\n      }\n      box-shadow: 0 6px 12px rgba(0, 0, 0, 0.3);\n    `,\n    css`\n      min-height: 100vh;\n      font-size: calc(10px + 2vmin);\n      color: white;\n      ${InfoLink} {\n        display: none;\n      }\n      ${HeaderContent} {\n        flex-direction: column;\n        align-items: center;\n        justify-content: center;\n      }\n    `\n  )}\n`;\n\nconst AppResults = styled.section`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  padding-top: 20px;\n`;\n\ntype WordResult = {\n  word: string;\n  score: number;\n  tags: string[];\n};\n\nconst App: React.FC = () => {\n  const [search, setSearch] = useState(\"\");\n  const { data, loading, error } = useFetch<WordResult[]>(\n    `https://api.datamuse.com/words?ml=${search}`\n  );\n  const hasResult: boolean = !!(data && data.length);\n  const handleChange = useCallback(e => setSearch(e.target.value), []);\n  return (\n    <AppContainer>\n      <Sticky>\n        {({ style, distanceFromTop }) => {\n          console.log({ distanceFromTop });\n          return (\n            // @ts-ignore\n            <AppHeader\n              // @ts-ignore\n              hasResults={hasResult}\n              style={{\n                ...style,\n                ...(distanceFromTop !== 0\n                  ? {}\n                  : { background: \"transparent\", boxShadow: \"none\" })\n              }}\n            >\n              <HeaderContent>\n                <AppLogo src={logo} />\n                <AppText>Find your next package name</AppText>\n                <AppInput\n                  type=\"text\"\n                  placeholder=\"Start typing...\"\n                  value={search}\n                  onChange={handleChange}\n                />\n                <InfoLink href=\"https://docs.npmjs.com/creating-and-publishing-unscoped-public-packages\">\n                  ℹ️\n                </InfoLink>\n              </HeaderContent>\n            </AppHeader>\n          );\n        }}\n      </Sticky>\n      <AppResults>\n        {data &&\n          !!data.length &&\n          [{ word: search }, ...data].map(({ word }) => (\n            <Result key={word} word={word} />\n          ))}\n      </AppResults>\n    </AppContainer>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { createGlobalStyle } from \"styled-components\";\n\nconst GlobalStyle = createGlobalStyle`\n:root {\n  --text-color: #f8f8f8;\n  --background-color: rgba(38, 38, 38);\n  --placeholder-color: #bbb;\n  --input-color: #f8f8f8;\n  --content-background-color: rgba(0, 0, 0, 0.3);\n}\n\n@media screen and (prefers-color-scheme: light) {\n  :root {\n    --text-color: rgba(38, 38, 38);\n    --background-color: #f8f8f8;\n    --placeholder-color: #222;\n    --input-color: rgba(38, 38, 38);\n    --content-background-color: #f5f5f5;\n  }\n}\n\n* {\n    box-sizing: inherit;\n}\n\nbody {\n  background: var(--background-color);\n  color: var(--text-color);\n  margin: 0;\n  font-family: 'Source Sans Pro', 'Lucida Grande', sans-serif;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n  box-sizing: border-box;\n  overflow-x: hidden;\n}\n\ncode {\n  font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New',\n  monospace;\n}\n`;\n\nReactDOM.render(\n  <>\n    <GlobalStyle />\n    <App />\n  </>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}